stages:
  - build
  - analyze
  - test

#cmake <source-dir> -G Xcode -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_OSX_SYSROOT="iphoneos" -DCMAKE_TOOLCHAIN_FILE="<Qt-dir>/<version>/#ios/lib/cmake/Qt6/qt.toolchain.cmake"
.build_common:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  artifacts:
    paths:
       - build/
  script:
    - mkdir -p build
    - cd build
    - env
    - CC=${CC} CXX=${CXX} cmake ../ -DCMAKE_PREFIX_PATH=${PREFIX_PATH} -DCMAKE_BUILD_TYPE:String=Debug -G${GENERATOR} ${EXTRA_ARGS}
    - ${ANALYZER} cmake --build . --target all

.build_linux:
  extends: .build_common
  variables:
    PREFIX_PATH: /home/falco/Qt/6.2.4/gcc_64
    GENERATOR: Ninja
    EXTRA_ARGS: 
  tags:
    - linux

build ubuntu20-gcc10:
  extends: .build_linux
  tags:
    - linux, gcc
  variables:
    CC: gcc
    CXX: g++
    
.build_linux_clang:
  extends: .build_linux
  tags: 
    - linux, clang
  variables:
    CC: clang-11
    CXX: clang++-11

build ubuntu20-clang11:
  extends: .build_linux_clang

build win10-vs2022:
  extends: .build_common 
  tags:
    - win10
  variables:   
    CC: cl
    CXX: cl
    PREFIX_PATH: C:/Qt/6.3.0/msvc2019_64
    GENERATOR: Ninja
    EXTRA_ARGS: 
  after_script:
    - pwd
    - C:/Qt/6.3.0/msvc2019_64/bin/windeployqt build/test/GimbalTests.exe

build win10-mingw11:
  extends: .build_common
  tags:
    - mingw, win10
  variables:
    CC: x86_64-w64-mingw32-gcc
    CXX: x86_64-w64-mingw32-g++
    PREFIX_PATH: C:/Qt/6.3.0/mingw_64
    GENERATOR: Ninja
    EXTRA_ARGS:
  after_script:
    - pwd
    - C:/Qt/6.3.0/mingw_64/bin/windeployqt build/test/GimbalTests.exe

build macos-clang13:
  extends: .build_common
  tags:
    - macos, clang
  variables:
    CC: clang
    CXX: clang++
    PREFIX_PATH: /Users/falco.girgis/Qt/6.3.1/macos
    GENERATOR: Ninja
    EXTRA_ARGS: 

build macos-gcc11:
  extends: .build_common
  tags:
    - macos, gcc
  variables:
    CC: gcc-11
    CXX: g++-11
    PREFIX_PATH: /Users/falco.girgis/Qt/6.3.1/macos
    GENERATOR: Ninja
    EXTRA_ARGS:

build ios-15-sim:
  extends: .build_common
  tags:
    - ios, simulator
  variables:
    CC: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang
    CXX: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++
    PREFIX_PATH: /Users/falco.girgis/Qt/6.3.1/ios
    GENERATOR: Xcode
    EXTRA_ARGS: -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_OSX_SYSROOT="iphoneos" -DCMAKE_TOOLCHAIN_FILE="/Users/falco.girgis/Qt/6.3.1/ios/lib/cmake/Qt6/qt.toolchain.cmake"

build webasm:
  extends: .build_common
  tags:
    - emscriptgen
  variables:
    CC: /home/falco/Documents/dev/emsdk/upstream/emscripten/emcc
    CXX: /home/falco/Documents/dev/emsdk/upstream/emscripten/em++
    PREFIX_PATH: /home/falco/Qt/6.3.0/wasm_32

.clang_tidy_common:
  stage: test
  script:
    - cd build
    - run-clang-tidy

analyze clang-tidy:
  stage: analyze
  extends: .clang_tidy_common
  needs: ["build ubuntu20-clang11"]
  dependencies:
    - build ubuntu20-clang11
  tags:
    - linux, clang, clang-tidy


.scan_build_common:
  extends: .build_linux_clang
  stage: analyze
  dependencies: []
  needs: []
  tags:
    - linux, clang, scan-build
  variables:
    ANALYZER: scan-build -v -v -o ./scan_build_report 
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - mkdir -p build
    - cd build
    - mkdir -p scan_build_report  
    - cd ../
  after_script:
    - cd ../
    - mkdir -p public
    - pwd 
    - ls
    - mkdir -p build/scan_build_report
    - mv build/scan_build_report/*/* ./public
  artifacts:
    paths:
      - public/

analyze scan-build-clang:
  extends: .scan_build_common
  variables:
    PREFIX_PATH: /home/falco/Qt/6.2.4/gcc_64
    CC: clang-11
    CXX: clang++-11

analyze scan-build-gcc:
  extends: .scan_build_common
  variables:
    PREFIX_PATH: /home/falco/Qt/6.2.4/gcc_64
    CC: gcc
    CXX: g++
 

test ubuntu20-gcc10:
  extends: .test_common
  needs: ["build ubuntu20-gcc10"]
  dependencies:
    - build ubuntu20-gcc10
  tags:
    - linux, gcc
    
.test_common:
  stage: test
  script:
    - build/test/GimbalTests
    
test ubuntu20-gcc10:
  extends: .test_common
  needs: ["build ubuntu20-gcc10"]
  dependencies:
    - build ubuntu20-gcc10
  tags:
    - linux, gcc
    
test ubuntu20-clang11:
  extends: .test_common
  needs: ["build ubuntu20-clang11"]
  dependencies:
    - build ubuntu20-clang11
  tags:
    - linux, clang

test win10-vs2022:
  extends: .test_common
  needs: ["build win10-vs2022"]
  dependencies:
    - build win10-vs2022
  tags:
    - win10, visual-studio

#test win10-cygwin-gcc10:
#  extends: .test_common
#  needs: ["build win10-cygwin-gcc10"]
#  dependencies:
#    - build win10-cygwin-gcc10
#  tags:
#    - gcc, win10

test win10-mingw11:
  extends: .test_common
  needs: ["build win10-mingw11"]
  dependencies:
    - build win10-mingw11
  tags:
    - mingw, win10

test macos-clang13:
  extends: .test_common
  needs: ["build macos-clang13"]
  dependencies:
    - build macos-clang13
  tags:
    - macos, clang

test macos-gcc11:
  extends: .test_common
  needs: ["build macos-gcc11"]
  dependencies:
    - build macos-gcc11
  tags:
    - macos, gcc
