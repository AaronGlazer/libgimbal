.build_common:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  artifacts:
    paths:
      - build/
  script:
    - mkdir build
    - cd build
    - env
    - CC=${CC} CXX=${CXX} ${ANALYZER} cmake ../ -DCMAKE_PREFIX_PATH=${PREFIX_PATH} -DCMAKE_BUILD_TYPE=Debug -GNinja
    - ${ANALYZER} ninja
  variables:
    CC: ""
    CXX: ""
    ANALYZER: ""

.build_linux:
  extends: .build_common
  variables:
    PREFIX_PATH: /home/falco/Qt/6.0.2/gcc_64
  tags:
    - linux

build ubuntu20-gcc10:
  extends: .build_linux
  tags:
    - linux, gcc
  variables:
    CC: gcc
    CXX: g++
    
.build_linux_clang:
  extends: .build_linux
  tags: 
    - linux, clang
  variables:
    CC: clang
    CXX: clang++

build ubuntu20-clang11:
  extends: .build_linux_clang

  

#build win10-vs2019:
#  extends: .build_common 
#  tags:
#    - visual-studio, win10
#  variables:   
#    CC: cl
#    CXX: cl
#    PREFIX_PATH: C:/Qt/6.0.2/msvc2019_64

#build win10-cygwin-gcc10:
#  extends: .build_common
#  tags:
#    - gcc, win10
#  variables:
#    CC: gcc
#    CXX: g++
#    PREFIX_PATH: C:/Qt/6.0.2/mingw81_64

#build win10-mingw8:
#  extends: .build_common
#  tags:
#    - mingw, win10
#  variables:
#    CC: C:/Qt/Tools/mingw810_64/bin/x86_64-w64-mingw32-gcc
#    CXX: C:/Qt/Tools/mingw810_64/bin/x86_64-w64-mingw32-g++
#    PREFIX_PATH: C:/Qt/6.0.2/mingw81_64

#build win10-clang:
#  extends: .build_common
#  tags:
#    - clang, win10
#  variables:
#    CC: "C:/Program Files/LLVM/bin/clang.exe"
#    CXX: "C:/Program Files/LLVM/bin/clang.exe"
#   PREFIX_PATH: "C:/Program Files/LLVM/bin"

build macos-clang12:
  extends: .build_common
  tags:
    - macos, clang
  variables:
    CC: clang
    CXX: clang++
    PREFIX_PATH: /Users/falcogirgis/Qt/6.0.2/clang_64

build macos-gcc10:
  extends: .build_common
  tags:
    - macos, gcc
  variables:
    CC: gcc-10
    CXX: g++-10
    PREFIX_PATH: /Users/falcogirgis/Qt/6.0.2/clang_64

.clang_tidy_common:
  stage: test
  script:
    - cd build
    - run-clang-tidy

test clang11-tidy:
  extends: .clang_tidy_common
  needs: ["build ubuntu20-clang11"]
  dependencies:
    - build ubuntu20-clang11
  tags:
    - linux, clang, clang-tidy

test clang11-scan-build:
  extends: .build_linux_clang
 # needs: ["build ubuntu20-clang11"]
 # dependencies:
  #  - build ubuntu20-clang11
  tags:
    - linux, clang, scan-build
  variables:
    ANALYZER: scan-build -o ./scan_build_report
  before_script:
    - mkdir -p build
    - cd build
    - mkdir -p scan_build_report  
    - cd ../

test ubuntu20-gcc10:
  extends: .test_common
  needs: ["build ubuntu20-gcc10"]
  dependencies:
    - build ubuntu20-gcc10
  tags:
    - linux, gcc
    
.test_common:
  stage: test
  script:
    - build/test/GimbalTests
    
test ubuntu20-gcc10:
  extends: .test_common
  needs: ["build ubuntu20-gcc10"]
  dependencies:
    - build ubuntu20-gcc10
  tags:
    - linux, gcc
    
test ubuntu20-clang11:
  extends: .test_common
  needs: ["build ubuntu20-clang11"]
  dependencies:
    - build ubuntu20-clang11
  tags:
    - linux, clang

#test win10-vs2019:
#  extends: .test_common
#  needs: ["build win10-vs2019"]
#  dependencies:
#    - build win10-vs2019
#  tags:
#    - win10, visual-studio

#test win10-cygwin-gcc10:
#  extends: .test_common
#  needs: ["build win10-cygwin-gcc10"]
#  dependencies:
#    - build win10-cygwin-gcc10
#  tags:
#    - gcc, win10

#test win10-mingw8:
#  extends: .test_common
#  needs: ["build win10-mingw8"]
#  dependencies:
#    - build win10-mingw8
#  tags:
#    - mingw, win10

test macos-clang12:
  extends: .test_common
  needs: ["build macos-clang12"]
  dependencies:
    - build macos-clang12
  tags:
    - macos, clang

test macos-gcc10:
  extends: .test_common
  needs: ["build macos-gcc10"]
  dependencies:
    - build macos-gcc10
  tags:
    - macos, gcc
