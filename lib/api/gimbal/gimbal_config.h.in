#ifndef GIMBAL_CONFIG_H
#define GIMBAL_CONFIG_H

#include <stdint.h>
#include <stddef.h>
#include <assert.h>

// Useful compiler info for internals
#cmakedefine MSVC
#ifdef MSVC
#   define GBL_MSVC
#   undef MSVC
#endif

#cmakedefine MINGW
#ifdef MINGW
#   define GBL_MINGW
#   undef MINGW
#endif

#cmakedefine CYGWIN
#ifdef CYGWIN
#   define GBL_CYGWIN
#   undef CYGWIN
#endif

#cmakedefine IOS
#ifdef IOS
#   define GBL_IOS
#   undef IOS
#endif

#cmakedefine MSYS
#ifdef MSYS
#   define GBL_MSYS
#   undef MSYS
#endif

#cmakedefine UNIX
#ifdef UNIX
#   define GBL_UNIX
#   undef UNIX
#endif

#ifndef WIN32
#   cmakedefine WIN32
#   ifdef WIN32
#       define GBL_WIN32
#       undef WIN32
#   endif
#endif

#cmakedefine XCODE
#ifdef XCODE
#   define GBL_XCODE
#   undef XCODE
#endif

#cmakedefine ANDROID
#ifdef ANDROID
#   define GBL_ANDROID
#   undef ANDROID
#endif

#cmakedefine APPLE
#ifdef APPLE
#   define GBL_APPLE
#   undef APPLE
#endif



//project
#define GBL_PROJECT_NAME                "@CMAKE_PROJECT_NAME@"
#define GBL_PROJECT_VERSION_MAJOR       @CMAKE_PROJECT_VERSION_MAJOR@
#define GBL_PROJECT_VERSION_MINOR       @PROJECT_VERSION_MINOR@
#define GBL_PROJECT_VERSION_PATCH       @PROJECT_VERSION_PATCH@
#define GBL_PROJECT_VERSION             "${PROJECT_VERSION}"
#define GBL_PROJECT_DESCRIPTION         "@PROJECT_DESCRIPTION@"
#define GBL_PROJECT_URL                 "@PROJECT_HOMEPAGE_URL@"

#define GBL_BUILD_TYPE                  "@CMAKE_BUILD_TYPE@"
#define GBL_BUILD_CONFIG                "@GBL_CONFIGURATION_DEFINES@"

#define GBL_BUILD_C_COMPILER         "@CMAKE_C_COMPILER_ID@ [@CMAKE_C_COMPILER_VERSION@]"
#define GBL_BUILD_CPP_COMPILER       "@CMAKE_CXX_COMPILER_ID@ [@CMAKE_CXX_COMPILER_VERSION@]"


// host
#define GBL_HOST_OS                 "@CMAKE_HOST_SYSTEM@"
#define GBL_HOST_ARCH       "@CMAKE_HOST_SYSTEM_PROCESSOR@"

//target
#define GBL_TARGET_OS                      "@CMAKE_SYSTEM@"
#define GBL_TARGET_ARCH           "@CMAKE_SYSTEM_PROCESSOR@"

#ifndef GBL_COPYRIGHT_YEAR
#   define GBL_COPYRIGHT_YEAR               "2020-2021"
#endif


#define GBL_COMPILER_PATH      CMAKE_C_COMPILER
#define GBL_COMPILER_ID        CMAKE_C_COMPILER_ID
#define GBL_COMPILER_TARGET    CMAKE_C_COMPILER_TARGET
#define GBL_COMPILER_VERSION   CMAKE_C_COMPILER_VERSION

#define GBL_CI_CHAT_CHANNEL      CHAT_CHANNEL //slack/discord server?
#define GBL_CI_CHAT_INPUT        CHAT_INPUT

#define GBL_CI_SERVER_URL        CI_SERVER_URL
#define GBL_CI_SERVER_NAME       CI_SERVER_NAME
#define GBL_CI_SERVER_REVISION   CI_SERVER_REVISION
#define GBL_CI_SERVER_VERSION    CI_SERVER_VERSION

#define GBL_CI_PROJECT_ID        CI_PROJECT_ID
#define GBL_CI_PROJECT_TITLE     CI_PROJECT_TITLE
#define GBL_CI_PROJECT_URL       CI_PROJECT_URL
#define GBL_CI_PROJECT_NAME      CI_PROJECT_NAME
#define GBL_CI_PROJECT_NAMESPACE CI_PROJECT_NAMESPACE
#define GBL_CI_PROJECT_DIR       CI_PROJECT_DIR
#define GBL_CI_PROJECT_VISIBILITY GIM_STRINGIFY(CI_PROJECT_VISIBILITY)

#define GBL_CI_RUNNER_ID         CI_RUNNER_ID
#define GBL_CI_RUNNER_DESC       CI_RUNNER_DESCRIPTION
#define GBL_CI_RUNNER_EXEC_ARCH  CI_RUNNER_EXECUTABLE_ARCH
#define GBL_CI_RUNNER_REVISION   CI_RUNNER_REVISION
#define GBL_CI_RUNNER_TAGS       CI_RUNNER_TAGS
#define GBL_CI_RUNNER_VERSION    CI_RUNNER_VERSION

#define GBL_CI_USER_ID         GITLAB_USER_ID
#define GBL_CI_USER_NAME       GITLAB_USER_NAME
#define GBL_CI_USER_LOGIN      GITLAB_USER_LOGIN
#define GBL_CI_USER_EMAIL      GITLAB_USER_EMAIL

#define GBL_CI_JOB_ID          CI_JOB_ID
#define GBL_CI_JOB_IMAGE       CI_JOB_IMAGE
#define GBL_CI_JOB_NAME        CI_JOB_NAME
#define GBL_CI_JOB_STAGE       CI_JOB_STAGE
#define GBL_CI_JOB_STATUS      CI_JOB_STATUS
#define GBL_CI_JOB_URL         CI_JOB_URL
#define GBL_CI_JOB_ENV_NAME    CI_JOB_ENV_SLUG
#define GBL_CI_JOB_ENV_URL     CI_JOB_ENV_URL
#define GBL_CI_JOB_PIPELINE_ID   CI_PIPELINE_ID
#define GBL_CI_JOB_PIPELINE_URL  CI_PIPELINE_URL
#define GBL_CI_JOB_PIPELINE_SRC  CI_PIPELINE_SOURCE

#define GBL_BUILD_FLAGS              CMAKE_BUILD_FLAGS

#define GBL_REPO_COMMIT_TITLE        CI_COMMIT_TITLE
#define GBL_REPO_COMMIT_MESSAGE      CI_COMMIT_DESCRIPTION
#define GBL_REPO_LANGUAGES           CI_PROJECT_REPOSITORY_LANGUAGES
#define GBL_REPO_COMMIT_TIMESTAMP    CI_COMMIT_TIMESTAMP
#define GBL_REPO_REVISION            CI_COMMIT_SHA
#define GBL_REPO_PREV_REVISION       CI_COMMIT_BEFORE_SHA
#define GBL_REPO_REF_NAME            CI_COMMIT_REF_NAME //works with bith git branches and tags
#define GBL_REPO_URL                 CI_REPOSITORY_URL



// allow userfunctions to be registered that return "unimplemented" instead of set to nullptr
// default to calling into parent context's methods when current is unavailable
// compile-in default implementations for Ext functions
//


#ifdef __cplusplus
extern "C" {
#endif

#ifndef GBL_ASSERT_1
#   define GBL_ASSERT_1(expr)                    assert((expr))
#endif

#ifndef GBL_ASSERT_2
#   define GBL_ASSERT_2(expr, cause)            GBL_ASSERT_1((expr) && (cause))
#endif

#ifndef GBL_BOOL
#   define GBL_BOOL                             uint32_t
#endif

#ifndef GBL_REAL
#   define GBL_REAL                             float
#endif

#ifndef GBL_INT
#   define GBL_INT                              int32_t
#endif

#ifndef GBL_ENUM
#   define GBL_ENUM                             uint32_t
#endif

#ifndef GBL_SIZE
#   define GBL_SIZE                             size_t
#   define GBL_SIZE_MAX                         SIZE_MAX
#   define GBL_SIZE_FMT                         "%zu"
#endif

#ifndef GBL_HASH
#   define GBL_HASH                             uint32_t
#endif

#ifndef GBL_TRUE
#   define GBL_TRUE                             1
#endif

#ifndef GBL_FALSE
#   define GBL_FALSE                            0
#endif

#ifndef GBL_SOURCE_FILE
#   define GBL_SOURCE_FILE                      __FILE__
#endif
#ifndef GBL_SOURCE_FUNCTION
#   define GBL_SOURCE_FUNCTION                  __func__
#endif
#ifndef GBL_SOURCE_LINE
#   define GBL_SOURCE_LINE                      __LINE__
#endif
#ifndef GBL_SOURCE_COLUMN
#   define GBL_SOURCE_COLUMN                    0
#endif

#ifndef GBL_API_FRAME_NAME
#   define GBL_API_FRAME_NAME             gblApiFrame_
#endif

#ifndef GBL_API_END_LABEL
#   define GBL_API_END_LABEL                    gbl_api_end_
#endif

#ifndef GBL_VA_SNPRINTF_BUFFER_SIZE
#   define GBL_VA_SNPRINTF_BUFFER_SIZE          512
#endif

#ifndef GBL_STRING_BUFFER_STACK_SIZE
#   define GBL_STRING_BUFFER_STACK_SIZE         64
#endif

#ifndef GBL_API_RESULT_MSG_BUFFER_SIZE
#   define GBL_API_RESULT_MSG_BUFFER_SIZE   128
#endif

#define GBL_SOURCE_LOCATION_TRACKING 1

#if GBL_SOURCE_LOCATION_TRACKING
#   ifndef GBL_SOURCE_LOCATION
        typedef struct GblSourceLocation {
            const char* pFile;
            const char* pFunc;
            GBL_SIZE     line;
            GBL_SIZE     column;
        } GblSourceLocation;

static inline GblSourceLocation GBL_SOURCE_LOCATION(const char* pFile, const char* pFunc, GBL_SIZE line, GBL_SIZE column) {
    const GblSourceLocation location = {
        pFile, pFunc, line, column
    };
    return location;
}

#       define GBL_SOURCE_LOCATION_CURRENT()     \
            GblSourceLocation {          \
                GBL_SOURCE_FILE,         \
                GBL_SOURCE_FUNC,         \
                GBL_SOURCE_LINE,         \
                GBL_SOURCE_COLUMN        \
            }
#   endif

#else

#   ifndef GBL_SOURCE_LOCATION
        typedef struct GblSourceLocation {
            char cppDummyVar;
        } GblSourceLocation;

#       define GBL_SOURCE_LOCATION()     \
            GblSourceLocation { 0 }

#   endif

#endif

// Assert upon encountering an error result?
#ifndef GBL_RESULT_ERROR_ASSERT
#   define GBL_RESULT_ERROR_ASSERT      0
#endif

// Assertion operation upon encountering an error.
#ifndef GBL_RESULT_ASSERT
#   if GBL_RESULT_ERROR_ASSERT
#       define GBL_RESULT_ASSERT(b, s)       GBL_ASSERT(b, s)
#   else
#       define GBL_RESULT_ASSERT(b, s)
#   endif
#endif

// Write to log when after encountering an error result?
#ifndef GBL_RESULT_LOG_ERRORS
#   define GBL_RESULT_LOG_ERRORS         1
#endif

// Log severity of error result message
#ifndef GBL_RESULT_ERROR_LOG_LEVEL
#   define GBL_RESULT_LOG_ERROR_LEVEL    GBL_LOG_LEVEL_ERROR
#endif

// Write to log when after encountering a partial succcess result?
#ifndef GBL_RESULT_LOG_PARTIAL_SUCCESSES
#   define GBL_RESULT_LOG_PARTIAL_SUCCESSES         1
#endif

// Log severity of partial success result message
#ifndef GBL_RESULT_LOG_PARTIAL_SUCCESS_LEVEL
#   define GBL_RESULT_LOG_PARTIAL_SUCCESS_LEVEL    GBL_LOG_LEVEL_WARNING
#endif

// Write to log when after encountering a succcess result?
#ifndef GBL_RESULT_LOG_SUCCESSES
#   define GBL_RESULT_LOG_SUCCESSES         0
#endif

// Log severity of success result message
#ifndef GBL_RESULT_LOG_SUCCESS_LEVEL
#   define GBL_RESULT_LOG_SUCCESS_LEVEL    GBL_LOG_LEVEL_DEBUG
#endif

// .....fuck
#ifndef GBL_RESULT_LOG
#   ifdef GBL_RESULT_ERROR_LOG
#       define GBL_RESULT_LOG(pCtx, file, func, line, exp, ...)     \
            do {                                                     \
                if(exp) GBLLogWrite_(pCtx,                          \
                               file, func, line,                     \
                               GBL_LOG_LEVEL_ERROR, __VA_ARGS__);   \
            } while(0)
#   else
#       define GBL_RESULT_LOG(pCtx, file, func, line, exp, ...) void
#   endif
#endif


// Log last error config



#define GBL_RESULT_CTX_FOLD(pCtx, HANDLER, ...) \
    GBL_RESULT_##HANDLER(pCtx, NULL, __VA_ARGS__)




#ifndef GBL_RESULT_SET_LAST_ERROR
#   ifdef GBL_RESULT_CONTEXT_TRACK_LAST_ERROR
#       define GBL_RESULT_SET_LAST_ERROR(pCtx, pDevice, result, level, pFile, pFunc, line, ...) \
            GBLContextUpdateLastError_(pCtx, pDevice, result, level, pFile, pFunc, line, __VA_ARGS__)
#   else
#       define GBL_RESULT_SET_LAST_ERROR(pCtx, pDevice, result, level, pFile, pFunc, line, pFormat, ...)
#   endif
#endif


#ifdef __cplusplus
}
#endif


#endif // GBL_CONFIG_H

