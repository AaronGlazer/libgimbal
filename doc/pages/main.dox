/*! \mainpage

*	LibGimbal is a C/C++-based, lightweight, cross-platform, general-purpose framework providing core functionality 
	such as containers, algorithms, strings, error management, custom allocators, logging, unit testing,
	and more to a myriad of targets, including retro game consoles, with a strong emphasis on performance and 
	language interoperability. Additionally it provides a full-fledged, runtime meta type system providing object-oriented 
	constructs to C and allowing for interop of complex object models between various C-compatible languages.

	LibGimbal provides both C and C++-based APIs, and has been written with a design goal of making these APIs easily 
	consumable from other languages which are compatible with C, such as Objective-C, Rust, Swift, Go, and even 
	scripting languages for such as Lua, Python, and Javascript for interoperability. 

	\tableofcontents

# Motivation
	LibGimbal was originally motivated by a desire to create common infrastructure between the various APIs and 
	libraries within the Elysian Shadows codebase (Engine, Toolkit, LibGyro, ElysianVMU Emulator, ElysianLua runtime, Common Qt 
	Widgets, etc). Many of these components were developed to be open-source 3rd party APIs in both C and C++, yet their 
	dependencies either meant code duplication or a dependency upon the closed-source portions of the codebase. 

	As development progressed, it became clear that the codebase had become essentially a monolith and that reusing components 
	for subprojects and libraries, especially between languages was not even feasible. Additionally, some of the most powerful features 
	implemented within the Engine and Toolkit, such as runtime reflection and debugging were tied at the hip to the Lua runtime, 
	and as such, were beginning to consume too many resources for target platforms such as the Sega Dreamcast, as the project scaled.

	LibGimbal was born as the lowest-level common core framework between these various components which were a mish-mash of C,
	C++, and Lua scripting. It has been written from the ground-up to provide a low-level, efficient common core between C and C++
	code and any langauges extending or interoping with the two.

# Features
	LibGimbal's featureset includes:
	- Unified error logging, tracking, and propagation with source code capture
	- Custom allocator support for all types from the ground-up
	- Macros providing abstractions for various compiler and platform-specific features
	- Multiple optimized string APIs for various use-cases (including string interning)
	- Replacement STL containers with both C++20 and C17-compatible APIs, with C++ polymorphic allocator support
	- Algorithms for sorting, hashing, CRC, parity, ntonl/htonl, GCD, powers-of-2, etc
	- Generic references and language-independent closure system 
	- Extensible variant types for dealing with dynamically typed and custom data
	- Compile-time configurable, macro-based API validation utilities
	- Macro utilities for advanced preprocessor-based meta programming 
	- Object-oriented runtime meta type system, providing an inheritance model, interfaces, properties, signals, etc.
	- Platform-independent unit testing framework

# Code Examples
##String References
 <table>
 <tr><td>C</td><td>C++</td></tr>
 <tr>
 <td>
 \code{.c}
   GblStringRef* pRef = GblStringRef_create("Hello World!");

   pRef[0] = 'Y';
   assert(strcmp(pRef, "Yello World!") == 0);
   
   GblStringRef* pRef2 = GblStringRef_acquire(pRef);
   assert(pRef == pRef2);
   assert(GblStringRef_refCount(pRef) == 2);
   
   GblStringRef_release(pRef);
   GblStringRef_release(pRef2);
 \endcode
</td>
<td>
\code{.cpp}
  gimbal::StringRef ref = "Hello World!";
  
  ref[0] = 'Y';
  assert(ref == "Yello World");
  
  gimbal::StringRef ref2 = ref;
  assert(ref.refCount() == 2);
\endcode
</td>
</tr>
</table>

##ArrayLists
aka std::vector with a better name:
 <table>
 <tr><td>C</td><td>C++</td></tr>
 <tr>
 <td>
 \code{.c}
   const char* pStringList[] = {
   		"Hello", "world", "and", "stuff"
   };

   GblArrayList vector;
   GblArrayList_construct(&vector, sizeof(const char*));
   GblArrayList_pushBack(&vector, &pStringList[2]);
   GblArrayList_prepend(&vector, pStringList, 2);
   GblArrayList_erase(&vector, 0, 2);
   GblArrayList_shrinkToFit(&vector);
   GblArrayList_destruct(&vector);
 \endcode
</td>
<td>
\code{.cpp}
   const char* pStringList[] = {
   		"Hello", "world", "and", "stuff"
   };

  gimbal::ArrayList<const char*> vector;
  vector.push_back(pStringList[2]);
  vector.prepend(pStringList, 2);
  vector.erase(vector.begin(), 2);
  vector.shrinkToFit();
\endcode
</td>
</tr>
</table>

##Variants
 \code{.c}
GblVariant v = GBL_VARIANT_INIT;

GblVariant_set(&v, 7);

char           cValue  = GblVariant_toChar(&v);
uint64_t       iValue  = GblVariant_toUint64(&v);     //all integral types supported with overflow checks 
GblBool        bValue  = GblVariant_toBool(&v);
float          fValue  = GblVariant_toFloat(&v);      // returns NAN upon conversion failure
double         dValue  = GblVariant_toDouble(&v);     // returns NAN upon conversion failure
const char*    sValue  = GblVariant_toString(&v);      
GblStringView  vValue  = GblVariant_toStringView(&v);
void*          pValue  = GblVariant_toPointer(&v);
GblType        tValue  = GblVariant_toTypeValue(&v);  // can go from a type name to type value ("bool" => GBL_BOOL_TYPE)
GblEnum        eValue  = GblVariant_toEnum(&v);       // if the type is a generic or derived enum type, or a string identifier
GblFlags       gValue  = GblVariant_toFlags(&v);      // if the type is a generic or derived flags type, or a string combination

GblVariant_destruct(&v);
\endcode 

##Flags Meta Types
<table><tr><td>
\code{.c}
typedef enum PROPERTY_FLAGS {
    READ    = 0x1,
    WRITE   = 0x2,
    LOAD    = 0x4,
    SAVE    = 0x8
} PROPERTY_FLAGS;

GblType type = GblFlags_register("PropertyFlags",
                                 (const GblFlagEntry[]){
                                     { READ,  "READ",  "Read"),
                                     { WRITE, "WRITE", "Write"),
                                     { LOAD,  "LOAD",  "Load"),
                                     { SAVE,  "SAVE",  "Save"),
                                     { 0,     NULL,    NULL }
                                 });

GblFlags flags = GblFlags_fromIndex(1, type);
assert(flags == WRITE);

flags = GblFlags_fromName("LOAD", type);
assert(flags == LOAD);

flags = GblFlags_fromNick("Save", type);
assert(flags == SAVE);

flags = GblFlags_fromString("READ|WRITE", type);
assert(flags == READ|WRITE);

// that's not a valid value...
assert(!GblFlags_valueCheck(99999, type));

GblVariant fVar, sVar;

// create one variant of flag type
GblVariant_constructFlags(&fVar, type, LOAD|SAVE);
// create one variant as an empty string
GblVariant_constructString(&sVar, "");

// convert the flag value into the string type variant
assert(GblVariant_canConvert(&fVar, &sVar));
GblVariant_convert(&fVar, &sVar);

assert(GblVariant_equals(&fVar, &sVar));

// oh look, we stringified the value!
assert(strcmp(GblVariant_getString(&sVar), "LOAD|SAVE") == 0);
\endcode
</td></tr></table>

##Object-Oriented C
Defining an Object:
\code{.c}
/* Create a vtable structure for GblObject which inherits from the GblBox base
   class and implements the GblITable, GblIEventHandler, and GblIEventFilter interface vtables. */	
GBL_CLASS_DERIVE(GblObject, GblBox,
                 GblITable, GblIEventHandler, GblIEventFilter)
    GBL_RESULT (*pFnConstructor)(GBL_SELF);
    GBL_RESULT (*pFnConstructed)(GBL_SELF);
    GBL_RESULT (*pFnProperty)   (GBL_CSELF, const GblProperty* pProp, GblVariant* pValue);
    GBL_RESULT (*pFnSetProperty)(GBL_SELF, const GblProperty* pProp, GblVariant* pValue);
GBL_CLASS_END

/* Generate a type instance structure, which contains per-instance data and is 
   instantiated each time and object is created. */
GBL_INSTANCE_DERIVE(GblObject, GblBox)
	GblStringRef* pName;
GBL_INSTANCE_END

// Declare a set of properties for our type, like a proper high-level OO language
GBL_PROPERTIES(GblObject,
    (name,     GBL_GENERIC,  (READ, WRITE, LOAD, SAVE), GBL_POINTER_TYPE),
    (parent,   GBL_GENERIC,  (READ, WRITE),             GBL_OBJECT_TYPE),
    (userdata, GBL_GENERIC,  (READ, WRITE),             GBL_POINTER_TYPE),
    (refCount, GBL_GENERIC,  (READ),                    GBL_UINT16_TYPE)
)
\endcode
Creating an Object
\code{.c}
GblObject* pObject = GBL_OBJECT_CREATE(GblObject,
                                       "name",     "childObject",
                                       "userdata", (void*)0xdeadbabe);

\endcode

Quarks/StringBuffer
Hash Tables
Context Control Flow, Logging, Errors
Object with Properties
Signals/Slots example
GblFlags example
Object with Events
Function overloading in C
C/++ generic selection




# Compiler Requirements 
	LibGimbal has been written to build with any compiler supporting standard C17, with its builtin C++ wrappers 
	requiring C++20. It is being explicitly tested against:
		- Microsoft Visual Studio
		- GCC
		- Clang
		- MinGW
		- Emscriptgen

	It is expected to compile with any other compiler as well, and any issues doing so will gladly be addressed.

# Cross-Platform 
	Additionally, libGimbal has been developed to be light-weight enough to run on embedded systems and retro 
	hardware. It is being explicitly unit tested against:
	- Windows
	- MacOS
	- Linux
	- iOS 
	- Android 
	- Web Assembly 
	- Playstation Vita 
	- Sega Dreamcast 

	We are happy to make changes required to accomodate other platforms. Yes, your toaster included.

# Design Philosophy
	We are well aware of the fact that trying to create a massively cross-platform, cross-language framework 
	such as this with language standard requirements as high as C17 and C++20 may seem strange. As libGimbal 
	is modeling so many complex concepts in a language as low-level as C, it has been decided that for the 
	sake of providing the most intuitive API with the most powerful featureset, modern language dialects would 
	be a hard requirement. 

	For example, libGimbal's C API provides many functions which are overloaded by parameter count or type
	variadically to provide less API clutter and annoyance of having to explictly specify a certain function
	for argument combination. Additionally, libGimbal internally utilizes functionality from the modern C 
	library such as aligned_alloc for cross-platform support. 

	In the C++ Vector API, for example, libGimbal makes use of C++20 "concepts" to provide an API
	that is generically compatible with the STL std::vector, std::pmr::vector, std::array, initializer_lists,
	and any contiguously indexable data type matching the given container type. This makes our containers 
	both powerful and user-friendly, but also makes them play well with existing C++ codebases using 
	standard containers. 

	One of the highest goals with libGimbal is to make the library as intuitive, user-friendly, and powerful
	as it can possibly be for each language it supports, rather than simply wrapping a low-level C API to 
	each. 

## Coding Style
### Naming Conventions
	It's probably quite obvious to the reader that the majority of the APIs within the codebase are fairly
	object-oriented in style. This is for two reasons. The first is that the meta type system provided by
	libGimbal is fundamentally object-oriented, and the second is that it is our opinion that for C APIs
	especially, adopting a more OO style reminescent of C++ tends to be more intuitive on the client (and 
	their intellisense), where each set of functions belongs to a type and is prefixed by a namespace, 
	rather than a bunch of global, free floating functions without much grouping or affiliation.

	The following is an example of a method declaration for the C API versus the C++ equivalent:
	<table>
	<tr><td>C</td><td>C++</td></tr>
	<tr><td>
	\code{.c}
	const char* GblObject_name   (GBL_CSELF);
	void 		GblObject_setName(GBL_SELF, const char* pString);
	\endcode
	</td>
	<td>
	\code{.cpp}
	namespace gimbal {

	    class Object { 
	   	public:
	   	    const char* name();
	   	    void        setName(const char* pString);
	
	    };
	}
	\endcode
	</td></tr>
	</table>
	where "GBL_SELF" and "GBL_CSELF" are predefined macros mimicking the non-const and const implicit "this" pointer in C++ and most OO languages.
### Macros
	Lets go ahead and get something out of the way here... this project makes generous utilization of C macro black magic, voodoo, codegen,
	DSLs, fuckery--call it what you will--but we do so unapologetically. This is a very advanced C codebase, and such macros are often literally 
	necessary (try to capture source context without one), and are often times far, far more convenient than duplicationg code paths.

	\code{.c}
		// You wanna type all this every time you want to make a simple hash set?!
		GBL_EXPORT GBL_RESULT        GblHashSet_construct_8   (GBL_SELF,
		                                                       GblSize            entrySize,
		                                                       GblHashSetHashFn   pFnHash,
		                                                       GblHashSetCmpFn    pFnCompare,
		                                                       GblHashSetDtorFn   pFnDestruct,
		                                                       GblSize            capacity,
		                                                       GblContext*        pCtx,
		                                                       void*              pUserdata);
		GBL_EXPORT GBL_RESULT        GblHashSet_construct_7   (GBL_SELF, /* ... */);
		GBL_EXPORT GBL_RESULT        GblHashSet_construct_6   (GBL_SELF, /* ... */);
		GBL_EXPORT GBL_RESULT        GblHashSet_construct_5   (GBL_SELF, /* ... */);
		GBL_EXPORT GBL_RESULT        GblHashSet_construct_4   (GBL_SELF, /* ... */);

		// Overload with a macro!
		#define                      GblHashSet_construct(...) \
		        GBL_VA_OVERLOAD_CALL(GblHashSet_construct, GBL_VA_OVERLOAD_SUFFIXER_ARGC, __VA_ARGS__)

   \endcode

	We provide all sorts of convenience overloads for our C APIs, which are by both argument count and type, closer to what you would expect in C++ thanks to macros. Not
	only that, but we provide the primitive macro utility and meta programming constructs through which you can leverage this stuff in your own 
	codebase, should you also wish to dabble in the dark arts (see gimbal_macro_composition.h and gimbal_macro_sequences.h).

	\code{.c}
	/* So you want me to give you a malloc function which captures source code location, optionally takes alignment, and optionally takes a debug string for 
	   tracing allocations and memory leaks? K. Hullo, macros! */

	#define GBL_API_MALLOC_4(src, size, align, dbgStr) \
    	GBL_API_INLINE_CALL_(MALLOC, src, size, align, dbgStr)

	#define GBL_API_MALLOC_3(src, size, align) \
    	GBL_API_MALLOC_4(src, size, align, GBL_NULL)

	#define GBL_API_MALLOC_2(src, size) \
    	GBL_API_MALLOC_3(src, gblAlignedAllocSize(size), GBL_ALIGNOF(GBL_MAX_ALIGN_T))

	#define GBL_API_MALLOC(...)  \
    	GBL_VA_OVERLOAD_CALL(GBL_API_MALLOC, \
    						 GBL_VA_OVERLOAD_SUFFIXER_ARGC, \ 
    						 SRC_LOC(SRC_FILE, SRC_FN, SRC_LN, SRC_COL), \
    						 __VA_ARGS__)
    \endcode

	Yes, they can be a pain in the ass. We know. But it is our opinion that properly used macros enrich the codebase and make it more modern. 
	The only place where someone using the codebase is really expected to be writing their own macros is for the meta type system's macro-based DSL, 
	where we can autogenerate class, instance, and interface structs for you, along with properties and signals, and do all kinds of useful things. 
	We strongly recommend using them, but they are purely optional.

# Building 
	LibGimbal is provided as a standard Cmake project which can be built using its CMakeLists. By default, just the library is built;
	however, there is an option to enable building the unit test executalbe as well. This is advised if you are porting the library to
	a new platform which hasn't been mentioned above as a sanity check.  

	Additionally, there are many options for controlling the behavior of libGimbal, in particular, how errors are handled. Each non-success 
	result type can be configured to be 
	- logged with a configurable severity level
	- stored as the lastIssue for the current thread and any active GblContext
	- asserted upon

# License
	LibGimbal is being released under the "I-dont-give-a-shit-what-you-do" license (pretty sure that'd be MIT). 
	A lot of time and energy were put into creating this framework, and we'd love to see it used in cool 
	projects or on cool hardware. We would appreciate some credit or acknowlegement, but just seeing it get 
	some love is plenty for us. 

	If you do use it, please feel free to log any bugs or feature requests or contribute back. 

# Credits
## Author
	- Falco Girgis

## Dependencies
	- HashSet and BTree back-ends: Josh Baker (tidwall) 
		- https://github.com/tidwall/hashmap.c
		- https://github.com/tidwall/btree.c
	- TinyCThread: Marcus Geelnard, Evan Nemerson
		- https://tinycthread.github.io/
	- SipHash: Jean-Philippe Amasson, Daniel J. Bernstein 
		- http://creativecommons.org/publicdomain/zero/1.0/
	- MurmurHash3: Austin Appleby

## Inspiration
	- Microsoft COM
		- Low-level, object-oriented binary interface and specification enabling object creation 
		and manipulation across langauges and processes. Introduced in 1993 and still going strong, it is a fantastic 
		example of an extensible architecture that has more than stood the test of time. To hate COM is to not truly understand COM.
	- GObject
		- The GNOME stack's runtime type system, powering GTk, while providing cross-language interoperability and a common object model. 
		  There's a reason GTk can have bindings to every language! While most developers see you as cumbersome legacy boilerplate, I 
		  can see beyond the horrible documentation. I respect what an incredible piece of engineering in C you actually are, truly 
		  understanding what it is you enable the GNOME stack to achieve. Underrated. 
	- GStreamer
		- Probably the most pristine, extensible C-based codebase I have ever seen. A huge architecture inspiration. Your 
		  User's Manual reads like fine poetry to me.
## Bibliography
	- "C Interfaces and Implementations: Techniques for Creating Reusable Software" by David R Hanson
		- Probably the single best C programming book I have ever read. Have you ever wanted to write your own C-based standard
		library and set of core utilities? Look no further.
	- "Object Oriented Programming with ANSI-C" by Axel Schreiner
		- The book that started it all for me. After being spoiled by C++20 and being stripped of all of my tools, moving back to plain
		  C was a painful, humbling experience. I actually almost gave up on this project and being a C programmer altogether. However,
		  this book inspired me to see beyond the language limitations and opened my mind to what could truly be accomplished
		  in C without the ++.

\todo
	- Have Marcel go over CSS and fix any reest
	- Qt style mini TOC doesn't have detailed documentation link
	- make macros appear in member documentation at the end
	- libGimbal icon padding
	- modules table separator a little audacious
	- types related methods/members tables have cut off open line
	- clicking on a link in a ToC fucks up botton navigator pane
	- header files with only macros have a fucked up ToC and no listing
*/ 

/*! \page docs Documentation

LibGimbal's features are conceptually split into the following high-level components:

\subpage Core
- platform-specific macros and utilities
- error handling and propagation
- debug and verification utilities
- structured logging
- custom allocator support
- basic data types 

\subpage Preprocessor
- commonly-used utility macros
- function overloading support for C
- macro compositon, variadic argument handling
- cross-language C/C++ generic selection
- eval, tuples, maps, lists, meta macro programming constructs 

\subpage Containers
- abstract data types with both C and C++ support
- Type-compatible replacement STL containers for C++
- STL-like containers and APIs for C
- support for custom allocators
- dynamic arrays, lists, ring buffers
- sets, trees, hash tables, byte arrays

\subpage Algorithms
- hashing algorithms (Murmur, Sip, Fnv1)
- sorting algorithms, searching algorithms
- random number generation API
- CRC, parity, LCM, GCD, prime numbers

\subpage Meta 
- generic, polymorphic variant types with type conversions
- cross-language, extensible object-oriented type system
- virtual functions, inheritance, private members for C
- mixins, interfaces, abstract classes, dynamic polymorphism
- generic FFI with cross-language closures and marshals
- generic, data-oriented property system
- Qt-style generic, event-driven signal system 
- object hierarchy management, parenting, traversals
- event handling, filtering, propagation
- plugin and module system

\subpage Testing
- cross-platform object-oriented C-based unit test framework
- test scenarios, suites, cases
- generic verification macros with source context capture 
- automatic timing and performance measurements
- memory utilization and leak detection
- support for dynamic/run-time test plan construction

*/

/*! \page Core Core Framework
	\tableofcontents

\subsection macros Macro Definitions
\subsubsection platformMacros Compiler and Platform-Specific
\subsubsection apiMacros API Declaration 
\subsubsection debugMacros Debugging and Validation

\subsection context Context Management
LibGimbal provides 

\subsubsection contextError Error Handling
\subsubsection contextogging Logging
\subsubsection contextAllocators Custom Allocators

\subsection data Data Types
\subsubsection dataPrimitives Primitive Types
\subsubsection dataStrings Strings
\copydoc strings

*/
