/*! \mainpage

*	LibGimbal is a C/C++-based, lightweight, cross-platform, general-purpose framework providing core functionality 
	such as containers, algorithms, strings, references, error management, custom allocators, logging, and more.
	Additionally it provides a full-fledged, runtime meta type system providing object-oriented constructs to C
	and allowing for interop of complex object models between various C-compatible languages.

	LibGimbal provides both C and C++-based APIs, and has been written with a design goal of making these APIs easily 
	consumable from other languages which are compatible with C, such as Objective-C, Rust, Swift, Go, and even 
	scripting languages for such as Lua, Python, and Javascript for interoperability. 

	\tableofcontents

# Motivation
	LibGimbal was originally motivated by a desire to create common infrastructure between the various APIs and 
	libraries within the Elysian Shadows codebase (Engine, Toolkit, LibGyro, ElysianVMU Emulator, ElysianLua runtime, Common Qt 
	Widgets, etc). Many of these components were developed to be open-source 3rd party APIs in both C and C++, yet their 
	dependencies either meant code duplication or a dependency upon the closed-source portions of the codebase. 

	As development progressed, it became clear that the codebase had become essentially a monolith and that reusing components 
	for subprojects and libraries, especially between languages was not even feasible. Additionally, some of the most powerful features 
	implemented within the Engine and Toolkit, such as runtime reflection and debugging were tied at the hip to the Lua runtime, 
	and as such, were beginning to consume too many resources for target platforms such as the Sega Dreamcast, as the project scaled.

	LibGimbal was born as the lowest-level common core framework between these various components which were a mish-mash of C,
	C++, and Lua scripting. It has been written from the ground-up to provide a low-level, efficient common core between C and C++
	code and any langauges extending or interoping with the two.

# Features
	LibGimbal's featureset includes:
	- Unified error logging, tracking, and propagation with source code capture
	- Custom allocator support for all types from the ground-up
	- Macros providing abstractions for various compiler and platform-specific features
	- Multiple optimized string APIs for various use-cases
	- Abstract data types and containers for resizable and associative arrays, binary trees, hash tables, etc
	- Algorithms for sorting, hashing, CRC, parity, ntonl/htonl, GCD, powers-of-2, etc
	- Generic references and language-independent closure system 
	- Extensible variant types for dealing with dynamically typed and custom data
	- Compile-time configurable, macro-based API validation utilities
	- Macro utilities for advanced preprocessor-based meta programming 
	- Object-oriented runtime meta type system, providing an inheritance model, interfaces, properties, signals, etc.
	- Platform-independent Unit testing framework

# Compiler Requirements 
	LibGimbal has been written to build with any compiler supporting standard C17, with its builtin C++ wrappers 
	requiring C++20. It is being explicitly tested against:
		- Microsoft Visual Studio
		- GCC
		- Clang
		- MinGW
		- Emscriptgen

	It is expected to compile with any other compiler as well, and any issues doing so will gladly be addressed.

# Cross-Platform 
	Additionally, libGimbal has been developed to be light-weight enough to run on embedded systems and retro 
	hardware. It is being explicitly unit tested against:
	- Windows
	- MacOS
	- Linux
	- iOS 
	- Android (CI integration pending)
	- Web Assembly (CI integration pending)
	- Playstation Vita (CI integration pending)
	- Sega Dreamcast (build setup pending)

	We are happy to make changes required to support building for other platforms. 

# Design Philosophy
	We are well aware of the fact that trying to create a massively cross-platform, cross-language framework 
	such as this with language standard requirements as high as C17 and C++20 may seem strange. As libGimbal 
	is modeling so many complex concepts in a language as low-level as C, it has been decided that for the 
	sake of providing the most intuitive API with the most powerful featureset, modern language dialects would 
	be a hard requirement. 

	For example, libGimbal's C API provides many functions which are overloaded by parameter count or type
	variadically to provide less API clutter and annoyance of having to explictly specify a certain function
	for argument combination. Additionally, libGimbal internally utilizes functionality from the modern C 
	library such as aligned_alloc for cross-platform support. 

	In the C++ Vector API, for example, libGimbal makes use of C++20 "concepts" to provide an API
	that is generically compatible with the STL std::vector, std::pmr::vector, std::array, initializer_lists,
	and any contiguously indexable data type matching the given container type. This makes our containers 
	both powerful and user-friendly, but also makes them play well with existing C++ codebases using 
	standard containers. 

	One of the biggest goals with libGimbal is to make the library as intuitive, user-friendly, and powerful
	as it can possibly be for each language it supports, rather than simply wrapping a low-level C API to 
	each. 

# Building 
	LibGimbal is provided as a standard cmake project which can be built using its CMakeLists.

# License
	LibGimbal is being released under the "I-dont-give-a-shit-what-you-do" license. A lot of time and energy
	was put into creating this framework, and we'd love to see it used in cool projects or on cool hardware. 
	We would appreciate some credit or acknowlegement, but just seeing it get some love is plenty for us. 

	If you do use it, please feel free to log any bugs or feature requests or contribute back.

# Credits
	- Lead Developer: Falco Girgis
	- Hash set and binary tree back-ends: Josh Baker (tidwall) 
	- MurmurHash3: Austin Appleby
	- SipHash: Jean-Philippe Amasson, Daniel J. Bernstein 
		- (http://creativecommons.org/publicdomain/zero/1.0/)

\todo
Formatting
	- Have Marcel go over CSS and fix any reest
	- Qt style mini TOC doesn't have detailed documentation link
	- make macros appear in member documentation at the end
	- libGimbal icon padding
	- modules table separator a little audacious
	- types related methods/members tables have cut off open line

*/ 

/*! \page docs Documentation

\subpage Core

\subpage Preprocessor

\subpage Containers

\subpage Algorithms

\subpage Meta

\subpage Testing

*/

/*! \page Core Core Framework
	\tableofcontents

\subsection macros Macro Definitions
\subsubsection platformMacros Compiler and Platform-Specific
\subsubsection apiMacros API Declaration 
\subsubsection debugMacros Debugging and Validation

\subsection context Context Management
\subsubsection contextError Error Handling
\subsubsection contextogging Logging
\subsubsection contextAllocators Custom Allocators

\subsection data Data Types
\subsubsection dataPrimitives Primitive Types
\subsubsection dataStrings Strings
\copydoc strings

*/
