
/*! \defgroup strings Strings 
	\ingroup dataTypes
* 	\brief Collection of specialized string types

	LibGimbal provides a rich set of string manipulation functions with API functionality taken
	from various languages such as C++ and Java. 
	
	Rather than create a single string type and API that is general-purpose and only "decent"
	at everything (such as C++'s std::string and most equivalents), libGimbal has taken the approach 
	of creating various different string types, with each optimized for a particular use-case. 

	For a little bit of extra complexity, this has the added benefits of allowing for custom-tailored
	APIs that are well suited for such individual use-cases in addition to the performance benefit.
	If you're using libGimbal with a higher-level langauge such as C++ or Rust, you also gain more
	than just another generic string type which is already builtin to your language of choice. 

## Choosing the Right String
    The following table can be referenced when deciding which string type to use:
   
    Type  			| Use-cases											| Header
	----------------|---------------------------------------------------|-------
	GblStringView   | Reading or immutable data processing				| gimbal_string_view.h
	GblStringBuffer | Writing or mutable data processing and building	| gimbal_string_buffer.h
	::GblStringRef	| Storing or managing ownership						| gimbal_string_ref.h
	::GblQuark		| Hashing or uniquely identifying  					| gimbal_quark.h
*/

